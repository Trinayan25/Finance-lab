# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tx98OLCXKjqZ4gt2CWgaDhpPok3gisFt
"""

#Question No: 01
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from math import erf


def remove(X):
    y = [x for x in X if not np.isnan(x)]    
    return y   

def read_data(filename):
    df = pd.read_csv(filename)
    df.set_index('Date',inplace=True)
    data = df.to_dict()
    for key, vals in data.items():
        data[key] = remove(list(vals.values()))
    return data

def historical_volatility(prices, duration):
    req_prices = prices[-duration:]
    
    R = []
    for i in range(1, len(req_prices)):
        ri = (req_prices[i] - req_prices[i-1])/req_prices[i-1]
        R.append(ri)


    var = np.var(R)
    sigma_d = np.sqrt(var)
    sigma_a = np.sqrt(252)*sigma_d
    return sigma_a

def d(x, tau, sigma, K, r):
    d_plus = (1/(sigma*np.sqrt(tau)))*(np.log(x/K) + tau*(r + (sigma*sigma)/2))
    d_minus = (1/(sigma*np.sqrt(tau)))*(np.log(x/K) + tau*(r - (sigma*sigma)/2))

    return d_plus, d_minus

def N(x):
	return 0.5*(1 + erf(x/np.sqrt(2)))

def C(t, x, T, sigma, K, r):
    if x == 0:
        return 0
    if t == T:
        return max(x - K, 0)

    tau = T-t
    d_plus, d_minus = d(x, tau, sigma, K, r)
    
    price = x*N(d_plus) - K*np.exp(-r*tau)*N(d_minus)

    return price

def P(t, x, T, sigma, K, r):
    call = C(t,x,T,sigma,K,r)
    put = call + K*np.exp(-r*(T-t)) - x

    return put

bse_data = read_data('bsedata1.csv')
nse_data = read_data('nsedata1.csv')

def function():
    
    n_days = 20

    for company, prices in bse_data.items():
        vol = historical_volatility(prices, n_days)
        print("Historical Volatility for %s BSE = %.6f"%(company, vol))

    for company, prices in nse_data.items():
        vol = historical_volatility(prices, n_days)
        print("Historical Volatility for %s NSE = %.6f"%(company, vol))

def main():
    function()    
 

if __name__ == '__main__':
    main()

